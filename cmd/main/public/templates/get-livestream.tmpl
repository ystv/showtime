{{ define "get-livestream" }}
<!DOCTYPE html>
<html>
  <head>
    <title>{{ .Title }}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css"
/>
<script
  defer
  src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"
></script>
  </head>
  <body>
  <div class="column has-text-centered">
    <a href="/livestreams">ðŸ”™ Back</a>=
      <h3 class="title is-5">{{ .Title }}</h3>
      <h2 class="title is-4">Stream key</h2>
      <div class="container block">
          <div class="notification is-primary">
              <h1 class="title is-2">{{ .StreamKey }}</h1>
          </div>
      </div>
      <nav class="level">
          <div class="level-item">
              <div class="buttons">
                  {{ if eq .Status "pending" }}
                      <a href="/livestreams/{{ .ID }}/start" class="button is-danger">Start stream</a>
                  {{ end }}
                  {{ if eq .Status "stream-started"}}
                      <a href="/livestreams/{{ .ID }}/end" class="button is-danger">End stream</a>
                  {{ end }}
                  <a href="/livestreams/{{ .ID }}/manage" class="button is-info">Manage stream</a>
              </div>
          </div>
      </nav>
    <div>
      <h3 class="title is-3">Events</h3>
        <div class="container block" id="evtsContainer">
            <em>Loading, please wait...</em>
        </div>
    </div>
    <p>
        Don't know how to add a stream key? Follow the guide 
        <a href="https://docs.ystv.co.uk/wiki/How_to_add_a_stream_key_to_OBS">here</a>.
    </p>
  </div>
  <template id="eventBlock">
      <div class="message">
          <div class="message-body" style="padding: 0">
              <h4 class="title is-5"></h4>
              <div class="subtitle time"></div>
              <p class="payload"></p>
          </div>
      </div>
  </template>
  <script type="text/javascript">
      function update() {
          fetch("/api/livestreams/{{ .ID }}/events").then(res => res.json()).then(/** @type any[] */evts => {
              const container = document.getElementById("evtsContainer");
              const template = document.getElementById("eventBlock");
              container.innerHTML = "";
              for (const evt of evts.reverse()) {
                const block = template.content.cloneNode(true);

                let clazz = "";
                switch (evt.type) {
                    case "streamLost":
                    case "error":
                        clazz = "is-danger";
                        break;
                }
                if (clazz.length > 0) {
                    block.querySelector(".message").classList.add(clazz);
                }

                let type = evt.type.replace("_", " ");
                type[0] = type[0].toUpperCase();
                block.querySelector(".title").textContent = type;
                block.querySelector(".time").textContent = new Date(evt.time).toLocaleString();

                switch (evt.type) {
                    case "linked":
                    case "unlinked":
                        block.querySelector(".payload").textContent = `To ${evt.data.integrationType} ${evt.data.integrationID}`;
                        break;
                    case "error":
                        const errRoot = document.createElement("div");
                        errRoot.innerText = evt.data.err;
                        const contextRoot = document.createElement("div")
                        contextRoot.innerText = "Context: " + evt.data.context;
                        block.querySelector(".payload").appendChild(errRoot).appendChild(contextRoot);
                        break;
                }

                container.appendChild(block);
              }
              setTimeout(update, 10_000);
          }).catch(err => {
              const container = document.getElementById("evtsContainer");
                container.innerHTML = `<div class="notification is-danger">
                <h1 class="title is-2">Error</h1>
                <p>${err}</p>
              `;
              setTimeout(update, 10_000)
          });
      }
      update();
  </script>
  </body>
</html>
{{ end }}
